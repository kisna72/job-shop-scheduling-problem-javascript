{"version":3,"sources":["mainAppComponents/mainAppNavBar.js","sharedComponents/react/Input.js","Pages/Machines.js","helpers.js","Pages/Categories.js","Pages/Jobs.js","mainAppComponents/Parameters.js","jobIdToColor.js","GanttMachineSchedule.js","JSSP.js","JobSetup.js","GanttXTicks.js","GattChart.js","worker.js","TwoDPlot.js","App.js","factoryOptimizationApp.js","serviceWorker.js","index.js"],"names":["MainAppNavBar","TextInput","props","id","Math","random","toString","substr","className","label","htmlFor","value","onChange","type","aria-describedby","placeholder","smallLabel","InlineMultiSelect","useState","Set","selectedValues","setSelectedValues","useEffect","allOptions","map","cat","idx","key","class","name","checked","has","event","categoryId","selectedClone","delete","add","Array","from","handleChange","MachineRow","editing","setEditing","machine","setName","categories","setCategories","target","console","log","categoryOptions","onClick","updatedMachineRow","updateMachine","categoryOptionsMap","Map","forEach","catOpt","set","reduce","prev","cur","get","deleteCategory","category","Machines","handleNameChange","setState","handleCategoryChange","categoriesSelected","addMachine","preventDefault","createMachine","state","this","machines","onSubmit","disabled","React","Component","CategoryRow","updateCategory","Categories","handleSubmit","createCategory","length","JobOperation","addingMachine","setAddingMachine","undefined","selectedMachine","setSelectedMachine","machineTime","setMachineTime","initialMachineSelection","operationName","machineAndTimes","mt","arr","newMachineAndTimes","filter","v","i","updateOperation","op","handleDeleteIconClick","newMachineTime","m","Job","operations","updateJob","newOperationName","setNewOperationName","addingNew","setAddingNew","operation","newOperations","oldJob","js","jobWithNewOperations","JobEditor","newJobName","setNewJobName","jobs","jobDef","createJob","Parameters","jobIdToColour","jobid","str","hash","charCodeAt","colour","GanttMachineSchedule","floor","a","schedule","start","end","_width","maxTime","_startpx","style","width","height","backgroundColor","position","left","transition","index","data-start","data-end","data-jobid","push","parentStyle","display","top","generateProblemInstance","arrOfArr","job","flattened","acc","numberOfMachineOptions","flat","t","parseInt","jobObjectToArrayOfArray","jsspProblem","JSSPProblemInstance","numMachineByJobs","jobDefArr","numMachines","nextIndexToCheck","n","mbar","numJobs","GanttXTicks","ticks","maxTimePlus","tick","WATER_BOTTLING_WATER_MACHINES","GanttChart","allEnds","schArr","max","sch","machineName","code","ResourceTypeEnum","ComplexOperationTypeEnum","JobShopAlgorithmEnum","RandomAlgorithmEnum","MaterialEnum","__assign","Object","assign","s","arguments","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","k","j","jl","JobShopProblem","resources","maxNumberOfSimulations","maxSecondsToRun","algorithm","RANDOM","hillClimbingRandomRestartPercent","totalRestarts","terminationCriteriaFuncs","generateDefaultTerminationCriteriaFunctions","bestMakeSpanLocal","Infinity","randomAlgorithm","FISHERYATES","addJob","addOperation","jobKey","tags","keys","curr","MACHINE","addResource","resource","_resource","setSolutionParameters","params","addTerminationCriteria","terminationFunction","isOperationComplex","FisherYatesShuffle","array","temporaryValue","randomIndex","currentIndex","countOperations","_this","count","_op","CAN_RUN_IN_PARALLEL","_operations","oneDToGanttChart","oned","ganttChartMachineMap","jobOperationIndexTrackingMap","jobEarliestStartMap","addOperationToSchedule","jobId","scheduleSoFar","earliestMachineAvailableTime","earliestJobStartTime","startTime","endTime","time","requiredInventory","operationIndex","complexOperation","endTimes","maxEndTime","CAN_RUN_IN_MULTIPLE_MACINES","Error","randomlyChoosenOperationFromMultipleMachineOptions","onedArrayOfJobs","getRandomArrayOfJobs","opcount","fill","concat","NORANDOM","swap","base","randi","randj","randiVal","best1Dsolution","HILL_CLIMBING","HILL_CLIMBING_WITH_RESTARTS","best1DSolutionLocal","costFunction","ganttChart","values","currentListOfSchedules","lastTime","funcs","args","currentSimulationIndex","terminationTime","Date","simulationStartTime","getTime","setSeconds","getSeconds","solve","postMessage","terminateNow","bestGanttChart","currentSimCount","bestMakeSpan","bestMakeSpanIndex","makeSpanHistory","defaultTerminationArgs","f","makespan","sleep","newMakeSpanToPushToUI","iteration","newMakeSpan","miliseconds","currentTime","onmessage","e","data","algorithmRepetition","problem","algorithmMaxTimeSecs","algorithmType","jsspSolver","mat","solParams","workerResult","substring","indexOf","lastIndexOf","blob","Blob","worker_script","URL","createObjectURL","TwoDPlot","val","x","y","title","problemStatic","App","startJobShopWorker","workerInstance","Worker","WebWorkerScript","addEventListener","iterations","makeSpan","minMakeSpanDetectedIteration","maxAlgorithmRepetition","handleRestartJobShopWorkerButton","terminate","handleStopWorker","prevProps","prevState","snapshot","screenWidth","window","innerWidth","colSpan","marginTop","o","allMachineTimes","FactoryOptimizationApp","handleNavBarClick","choosenMenu","activeMenu","mac","deleteMachine","deleteJob","best_schedule","JSON","parse","localStorage","getItem","setItem","stringify","basename","process","to","exact","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","href","origin","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e5d9a996.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/navbar.scss';\r\n\r\nfunction MainAppNavBar(props){\r\n  const menuItems =  ['Machines','Jobs','Parameters','Solution']\r\n  console.log(props)\r\n  return (\r\n    <nav>\r\n      <ul className='factory-navbar'>\r\n      {menuItems.map(menu => {\r\n        const activeClass = menu == props.activeMenu ? 'active' : ''\r\n        console.log(\"activeClass \" , activeClass)\r\n        return <> \r\n          <li className='factory-navbar__menu-item' onClick={() => props.handleClick(menu)}>{menu}</li> \r\n          <span className={`factory-navbar__right-arrow ${activeClass}`}></span>\r\n        </>\r\n      })}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default MainAppNavBar\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * Generates a Input Form. Below assumes that you have react and bootstrap imported in your project.\r\n * @param {{id?:string|number, label?:string, type?:string, placeholder?:string, smallLabel?:string, value:string, onChange:function}} props\r\n */\r\nfunction TextInput(props) {\r\n  let id = props.id ? props.id : Math.random().toString(36).substr(2); //If id is not provided, assign a random string.\r\n  return (\r\n    <div className=\"form-group\">\r\n      {props.label ? <label htmlFor={id}>{props.label}</label> : null}\r\n      <input \r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        type={props.type ? props.type : \"text\"} \r\n        className=\"form-control\" \r\n        id={id} \r\n        aria-describedby={props.label} \r\n        placeholder={props.placeholder} \r\n      />\r\n      {props.smallLabel ? <small id=\"id\" className=\"form-text text-muted\">{props.smallLabel}</small> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Generates a InlineMultiSelect Form Input.\r\n * @param {{allOptions:{id:string,name:string}[], selectedValues:[],name:string, label?:string, onChange:function }} props \r\n */\r\nfunction InlineMultiSelect(props){\r\n  const [selectedValues, setSelectedValues] = useState(new Set(props.selectedValues ? props.selectedValues : []))\r\n\r\n  // when props.selectedValues changes, update the state accordingly. This helps when you are clearing selectedValues from parent component\r\n  useEffect(() => {\r\n    setSelectedValues(new Set(props.selectedValues))\r\n  }, [props.selectedValues])\r\n\r\n  function handleChange(event, categoryId){\r\n    const selectedClone = new Set(selectedValues);\r\n    if(selectedClone.has(categoryId)){\r\n      selectedClone.delete(categoryId)\r\n    } else {\r\n      selectedClone.add(categoryId)\r\n    }\r\n    setSelectedValues(selectedClone);\r\n    props.onChange(Array.from(selectedClone))\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      {props.label ? <p>{props.label}</p> : null }\r\n      {props.allOptions.map( (cat, idx) => {\r\n        return (\r\n          <div key={cat.id} class=\"form-check form-check-inline\">\r\n            <input\r\n              class=\"form-check-input\" \r\n              type=\"checkbox\" \r\n              id={`${props.name}-${idx}`} \r\n              name={props.name}\r\n              value={cat.id}\r\n              checked={selectedValues.has(cat.id) ? true : false }\r\n              onChange={(event) => handleChange(event, cat.id) }\r\n            />\r\n            <label className=\"form-check-label\" htmlFor={`${props.name}-${idx}`}>{cat.name}</label>\r\n          </div>\r\n        )\r\n      })}\r\n  </div>)\r\n}\r\n\r\nexport { TextInput, InlineMultiSelect }","import React, { useState } from 'react';\r\nimport '../styles/machines.scss';\r\nimport { randomID } from '../helpers';\r\nimport { TextInput, InlineMultiSelect } from '../sharedComponents/react/Input';\r\nimport { FaRegTrashAlt, FaEdit  } from 'react-icons/fa';\r\n\r\n/**\r\n * \r\n * @param {{machine:{},categoryOptions:[] }} props \r\n */\r\nfunction MachineRow(props){\r\n  const [editing, setEditing] = useState(false);\r\n  const [name, setName] = useState(props.machine.name);\r\n  const [categories, setCategories] = useState(props.machine.categories)\r\n\r\n  const handleEditIconClick = function(){\r\n    setEditing(true);\r\n  }\r\n\r\n  const handleCancel = function(){\r\n    setEditing(false)\r\n  }\r\n  const handleSave = function(){\r\n    const updatedMachineRow = {id:props.machine.id, name:name, categories:categories}\r\n    console.log(\"updated machines \",  updatedMachineRow)\r\n    props.updateMachine({id:props.machine.id, name:name, categories:categories})\r\n    setEditing(false)\r\n  }\r\n\r\n  const handleCategoryChange = function(categories) {\r\n    console.log(\"updating categories\", categories)\r\n    setCategories(categories);\r\n  }\r\n\r\n  if(editing){\r\n    return (\r\n      <tr key={props.machine.id}>\r\n        <td>{props.machine.id}</td>\r\n        <td><input value={name} onChange={(event) => setName(event.target.value)}  /></td>\r\n        <td>\r\n          <InlineMultiSelect \r\n            onChange={handleCategoryChange}\r\n            allOptions={props.categoryOptions}\r\n            selectedValues={categories} \r\n            name={`category-select-edit-${props.machine.id}`}\r\n          />\r\n        </td>\r\n        <td>\r\n          <div className=\"d-flex justify-content-around\">\r\n            <button onClick={handleSave}>Save</button>\r\n            <button onClick={handleCancel}>Cancel</button>\r\n          </div>\r\n        </td>\r\n    </tr>\r\n    )\r\n  }\r\n  const categoryOptionsMap = new Map()\r\n  props.categoryOptions.forEach(catOpt => {\r\n    categoryOptionsMap.set(catOpt.id, catOpt);\r\n  })\r\n\r\n  return (\r\n    <tr key={props.machine.id}>\r\n      <td>{props.machine.id}</td>\r\n      <td>{props.machine.name}</td>\r\n      <td>{props.machine.categories.reduce( (prev, cur, idx) => `${prev} ${idx === 0 ? '': ','} ${ categoryOptionsMap.has(cur) ? categoryOptionsMap.get(cur).name : '' }`,'')}</td>\r\n      <td>\r\n          <div className=\"d-flex justify-content-around\">\r\n            <FaEdit onClick={handleEditIconClick}/>\r\n            <FaRegTrashAlt onClick={() => props.deleteCategory(props.category)}/>\r\n          </div>\r\n        </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nclass Machines extends React.Component {\r\n  constructor(props){\r\n    super(props) //props gets the machines object.\r\n    this.state = {\r\n      name:'',\r\n      categories:[]\r\n    }\r\n  }\r\n  handleNameChange = (event) => {\r\n    this.setState({name:event.target.value})\r\n  }\r\n  handleCategoryChange = (categoriesSelected) => {\r\n    this.setState({\r\n      categories: categoriesSelected\r\n    })\r\n  }\r\n  addMachine = (event) => {\r\n    event.preventDefault();\r\n    // CODE to call the API. \r\n    this.props.createMachine({\r\n      name:this.state.name,\r\n      categories:this.state.categories,\r\n      id: randomID()\r\n    });\r\n    \r\n    // Clear the Name and categories\r\n    this.setState({\r\n      name:'',\r\n      categories: []\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n    <div className=\"kr-card1\">\r\n        <h3>Machines</h3>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Id</th>\r\n              <th>Name</th>\r\n              <td>Categories</td>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.machines.map(machine => <MachineRow machine={machine} updateMachine={this.props.updateMachine} categoryOptions={this.props.categories} />)}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"kr-card\">\r\n\r\n          <h3> Add a new machine </h3>\r\n          <form className=\"\" onSubmit={this.addMachine}>\r\n            <TextInput\r\n              id=\"machine-name\" \r\n              label=\"Name for your machine\"\r\n              smallLabel=\"Give your machine a recognizable name\"\r\n              value={this.state.name}\r\n              onChange={this.handleNameChange}\r\n            />\r\n            <InlineMultiSelect \r\n              onChange={this.handleCategoryChange} \r\n              allOptions={this.props.categories}\r\n              selectedValues={this.state.categories}\r\n              name=\"category-select-new\"\r\n            />\r\n            <button type=\"submit\" className=\"btn btn-primary mb-2\" disabled={this.state.name === \"\" }>Add Machine</button>\r\n          </form>\r\n        </div>\r\n      \r\n    </div>)\r\n  }\r\n}\r\n\r\nexport default Machines \r\n","var randomID = function () {\r\n    // Math.random should be unique because of its seeding algorithm.\r\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n    // after the decimal.\r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n  };\r\n\r\n\r\nexport {\r\n    randomID,\r\n   \r\n}\r\n","import React, { useState } from 'react';\r\nimport { TextInput } from '../sharedComponents/react/Input';\r\nimport { FaRegTrashAlt, FaEdit  } from 'react-icons/fa';\r\nimport '../styles/kr-card.css';\r\nimport '../styles/kr-form.css';\r\n\r\n/**\r\n * Handles Showing Category in a Table Row. Also Handles deleting and Editing based on user input. \r\n * @param {{category:{id:string,name:string},updateCategory:function, deleteCategory: function }} props \r\n */\r\nfunction CategoryRow(props){\r\n  const [editing, setEditing] = useState(false);\r\n  const [name, setName] = useState(props.category.name); // For Managing state during editing \r\n\r\n  const handleEditIconClick = function(){\r\n    setEditing(true)\r\n  }\r\n  const handleChangeWhenEditing = function(event){\r\n    setName(event.target.value)\r\n  }\r\n  const handleSave = function(){\r\n    props.updateCategory({\r\n      ...props.category,\r\n      name\r\n    })\r\n    setEditing(false)\r\n  }\r\n  const handleCancel = function () {\r\n    setEditing(false)\r\n  }\r\n\r\n\r\n  if(editing){\r\n    return (\r\n      <tr key={props.category.id}>\r\n      <td>{props.category.id}</td>\r\n      <td>\r\n        <input value={name} onChange={handleChangeWhenEditing}>\r\n        </input>\r\n      </td>\r\n      <td>\r\n        <div className=\"d-flex justify-content-around\">\r\n          <button onClick={handleSave}>Save</button>\r\n          <button onClick={handleCancel}>Cancel</button>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <tr key={props.category.id}>\r\n        <td>{props.category.id}</td>\r\n        <td>{props.category.name}</td>\r\n        <td>\r\n          <div className=\"d-flex justify-content-around\">\r\n            <FaEdit onClick={handleEditIconClick}/>\r\n            <FaRegTrashAlt onClick={() => props.deleteCategory(props.category)}/>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n  )\r\n}\r\n\r\nclass Categories extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name:''\r\n    }\r\n  }\r\n  handleChange = (event) =>{\r\n    this.setState({\r\n      name:event.target.value\r\n    })\r\n    console.log(event.target.value)\r\n  }\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.props.createCategory({\r\n      name:this.state.name,\r\n      machines:[]\r\n    })\r\n    this.setState({\r\n      name:''\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"machines-wrapper__categories kr-card2\">\r\n        <h3>Tags</h3>\r\n        <table className=\"table\">\r\n          <thead>\r\n            {this.props.categories.length > 0 && \r\n              <tr>\r\n                <th>Id</th>\r\n                <th>Name</th>\r\n                <td>Actions</td>\r\n              </tr>\r\n            }\r\n          </thead>\r\n          <tbody>\r\n            {this.props.categories.map(category => <CategoryRow category={category} updateCategory={this.props.updateCategory} deleteCategory={this.props.deleteCategory}/>)}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"kr-card\">\r\n\r\n        <p className=\"machines-wrapper__categories--intro\">\r\n          Please Enter a new tag below. Once saved,\r\n          the tags will appear as a selection option\r\n          in each machine. You'll have to individually apply\r\n          new tags to existing machines.\r\n        </p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <TextInput\r\n            id=\"category-input\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            label=\"Enter new category\"\r\n            smallLabel=\"You will be able to apply each category to multiple machines\"\r\n            />\r\n          <button type=\"submit\" className=\"btn btn-primary\" disabled={this.state.name === \"\"}>Add Category</button>\r\n        </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Categories","import React, { useState, useEffect } from \"react\";\r\nimport { TextInput } from '../sharedComponents/react/Input';\r\nimport { FaRegTrashAlt, FaEdit  } from 'react-icons/fa';\r\n\r\n/**\r\n * Display a Job Operation\r\n * @param {{id:number, operationName:string, machineAndTimes:[[id:number,time:number]], machines:[], updateOperation:function }} props \r\n */\r\nfunction JobOperation(props) {\r\n  const [addingMachine, setAddingMachine]= useState(false);\r\n  const [selectedMachine, setSelectedMachine] = useState(props.machines.length > 0 ? props.machines[0].id  : undefined);\r\n  const [machineTime, setMachineTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const initialMachineSelection = props.machines.length > 0 ? props.machines[0].id  : undefined\r\n    setSelectedMachine(initialMachineSelection)\r\n  }, [props.machines])\r\n  \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const newMachineTime = [selectedMachine, machineTime]\r\n    const {machines, updateOperation, ...op} = props\r\n    const updatedOperation = {\r\n      ...op,\r\n      machineAndTimes:[...props.machineAndTimes, newMachineTime]\r\n    }\r\n    updateOperation(updatedOperation);\r\n    setMachineTime(0);\r\n    setAddingMachine(false);\r\n  }\r\n  \r\n  const handleDeleteIconClick = (idx) => {\r\n    console.log(\"deleting \", idx)\r\n    const newMachineAndTimes = props.machineAndTimes.filter( (v, i) => i !== idx)\r\n    const {machines, updateOperation, ...op} = props\r\n    const updatedOperation = {\r\n      ...op,\r\n      machineAndTimes:newMachineAndTimes\r\n    }\r\n    updateOperation(updatedOperation);\r\n  }\r\n\r\n  return (\r\n    <div className=\"kr-card mb-2\">\r\n      <h5>{props.operationName}</h5>\r\n      <table className=\"table table-sm\">\r\n        <thead>\r\n          <tr>\r\n            <th>Machine Id</th>\r\n            <th>Time</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.machineAndTimes.map( (mt, idx, arr) => {\r\n            return <tr key={idx}>\r\n              <td>{mt[0]}</td>\r\n              <td>{mt[1]}</td>\r\n              <td>\r\n                <div className=\"d-flex justify-content-around\">\r\n                  {/* <FaEdit onClick={handleEditIconClick}/> */}\r\n                  <FaRegTrashAlt onClick={() => handleDeleteIconClick(idx) }/>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {addingMachine ? \r\n        <form onSubmit={handleSubmit}>\r\n          <select className=\"form-control\" onChange={(event) => setSelectedMachine(event.target.value)} value={selectedMachine}>\r\n            {props.machines.map( m => <option value={m.id}>{m.name}</option> )}\r\n          </select>\r\n          <input className=\"form-control\" placeholder=\"enter time\" value={machineTime} onChange={(event)=>setMachineTime(event.target.value)}></input>\r\n          <button>Submit</button>\r\n          <button onClick={() => setAddingMachine(false)} className=\"button btn-primary mt-1\">Cancel</button>\r\n        </form>\r\n      \r\n      : <button onClick={() => setAddingMachine(true)} className=\"button btn-primary mt-1\">Add New Machine Option</button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Display a Job.\r\n * @param {{id:number, name:string, operations:[ [machineid:number,time:string] ] , updateJob:function, machines }} props \r\n */\r\nfunction Job(props) {\r\n  const {id, name,operations,updateJob,machines} = props;\r\n\r\n  const [newOperationName, setNewOperationName] = useState('');\r\n  const [addingNew, setAddingNew] = useState(false)\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    // Add Operation to the Job, and send a update\r\n    const jobWithNewOperations = {\r\n      id: id,\r\n      name: name,\r\n      operations: [...operations, {\r\n        id: operations.reduce( (prev, cur) => cur.id <= prev ? prev+1 : cur.id+1 , 1),\r\n        operationName:newOperationName,\r\n        machineAndTimes:[]\r\n      }]\r\n    }\r\n    updateJob(jobWithNewOperations);\r\n    setNewOperationName('');\r\n    setAddingNew(false);  \r\n  }\r\n\r\n  const updateOperation = (operation) => {\r\n    // Create a new copy of operation here.\r\n    const newOperations = operations.map( op => op.id === operation.id ? operation : op)\r\n    const {machines, updateJob, ...oldJob} = props\r\n    const jobWithUpdatedOperation = {\r\n      ...oldJob,\r\n      operations:newOperations\r\n    }\r\n    updateJob(jobWithUpdatedOperation);\r\n  }\r\n  return (\r\n    <div className=\"kr-card mb-3\">\r\n      <h3>{name}</h3>\r\n      <div className=\"d-flex flex-wrap align-items-center align-self-center\">\r\n      {operations.map(js => \r\n        <>\r\n          <JobOperation\r\n            id={js.id}\r\n            key={js.operationName} \r\n            operationName={js.operationName} \r\n            machineAndTimes={js.machineAndTimes}\r\n            machines={machines}\r\n            updateOperation={updateOperation}\r\n          />\r\n          <div className=\"p-3\"> -> </div>\r\n        </>\r\n      )}\r\n        { addingNew ? \r\n        <form className=\"kr-card\" onSubmit={handleSubmit}>\r\n          <TextInput\r\n            id=\"job-new-input\"\r\n            value={newOperationName}\r\n            onChange={(event) => setNewOperationName(event.target.value)}\r\n            label=\"Enter new Operation\"\r\n            smallLabel=\"You will be able to add possible machines after adding an operation\"\r\n            />\r\n          <button type=\"submit\" className=\"btn btn-primary\" disabled={newOperationName === \"\"}>Add new Operation</button>\r\n          <button className=\"btn btn-warning ml-1\" onClick={() => setAddingNew(false)}>Cancel</button>\r\n        </form>\r\n        : <button className=\"btn btn-primary\" onClick={() => setAddingNew(true)}>Add Operation </button>\r\n        }\r\n      </div>\r\n    </div>)\r\n}\r\n\r\n/**\r\n * @param {{machines:[], jobs:[{jobSequence:[]] }} props \r\n */\r\nfunction JobEditor(props) {\r\n  const [newJobName, setNewJobName ] = useState('')\r\n\r\n  const handleChange = (event) => {\r\n    setNewJobName(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // call props.addJob \r\n    props.createJob({\r\n      name:newJobName,\r\n      operations:[]\r\n    })\r\n\r\n    setNewJobName('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"m-5\">\r\n      <h3>See SKUs below</h3>\r\n      { props.jobs.map(jobDef => <Job key={jobDef.name} id={jobDef.id} name={jobDef.name} operations={jobDef.operations} updateJob={props.updateJob} machines={props.machines} />) }\r\n      <form className=\"kr-card\" onSubmit={handleSubmit}>\r\n          <TextInput\r\n            id=\"job-new-input\"\r\n            value={newJobName}\r\n            onChange={handleChange}\r\n            label=\"Enter new Job (new SKU)\"\r\n            smallLabel=\"You will be able to add operations for each job after creating it\"\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-primary\" disabled={newJobName === \"\"}>Add new Job</button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JobEditor","import React from 'react';\r\n\r\nclass Parameters extends React.Component {\r\n  render(){\r\n    return <div>I am Parameters Component </div>\r\n  }\r\n}\r\n\r\nexport default Parameters;\r\n","// Modified from https://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript\r\nfunction jobIdToColour(jobid) {\r\n    const str = `${jobid}color`\r\n    var hash = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    var colour = '#';\r\n    for (var i = 0; i < 3; i++) {\r\n        var value = (hash >> (i * 8)) & 0xFF;\r\n        colour += ('00' + value.toString(16)).substr(-2);\r\n    }\r\n    return colour;\r\n}\r\n\r\nexport default jobIdToColour","import React from 'react';\r\nimport jobIdToColour from './jobIdToColor';\r\n\r\n/**\r\n * Idea here is to take an array\r\n */\r\nclass GanttMachineSchedule extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    randColor(){\r\n        return Math.floor(Math.random() * 180) //use 180 instead of 255 to avoid colors too light\r\n    }\r\n\r\n    render(){\r\n        let a = [] \r\n        for(let i = 0; i< this.props.schedule.length; i++){\r\n            if(i%3 === 0){\r\n                const jobid = this.props.schedule[i];\r\n                const start = this.props.schedule[i + 1];\r\n                const end = this.props.schedule[i + 2];\r\n                const _width = 100* (end - start)/this.props.maxTime\r\n                const _startpx = 100* start / this.props.maxTime\r\n                const style = {\r\n                    width:`${_width}%`,\r\n                    height: '20px',\r\n                    // border:'black',\r\n                    backgroundColor:`${jobIdToColour(jobid)}`,\r\n                    position:'absolute',\r\n                    left:`${_startpx}%`,\r\n                    transition: 'all 1s linear'\r\n                }\r\n\r\n                const width = <div id={`key-${this.props.index}-${jobid}`} className={`job-${jobid}`}  style={style} data-start={start} data-end={end} data-jobid={jobid}>Job-{jobid}</div>\r\n                a.push(width)\r\n            }\r\n            continue\r\n        }\r\n        const parentStyle = {\r\n            position:'relative',\r\n            display:'flex',\r\n            top:`${this.props.index * 25}px`\r\n        }\r\n        return (\r\n            <div style={parentStyle}>\r\n                {a}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GanttMachineSchedule","import GanttMachineSchedule from \"./GanttMachineSchedule\";\r\n\r\n\r\nconst jobObjectToArrayOfArray = (job) => {\r\n    const operationReducer = (acc, operation) => {\r\n      const numberOfMachineOptions = operation.machineAndTimes.length;\r\n      // const flattenedMachineTimes = operation.machineAndTimes.map()\r\n      return [...acc, numberOfMachineOptions, ...operation.machineAndTimes.flat().map(t => parseInt(t)) ] //converting to int just in case\r\n    }\r\n    const flattened = job.operations.reduce(operationReducer, []);\r\n    console.log(flattened)\r\n    return flattened\r\n  }\r\n/**\r\n * Generate a job from this.state.jobs, and this.state.machines \r\n */\r\nconst generateProblemInstance = (jobs, machines) => {\r\nconsole.log(\"running problemInstance\", jobs, machines)\r\nconst arrOfArr = jobs.map(job => {\r\n    return jobObjectToArrayOfArray(job);\r\n})\r\nconst jsspProblem = new JSSPProblemInstance(jobs.length,machines.length);\r\njsspProblem.jobs = arrOfArr\r\n// Infer number of machines the job needs to run based on job definition.\r\njsspProblem.numMachineByJobs = []\r\njsspProblem.jobs.forEach(jobDefArr => {\r\n  let numMachines = 0\r\n  let nextIndexToCheck = 0;\r\n  for(let i = 0; i < jobDefArr.length; i++ ){\r\n    if(i === nextIndexToCheck){\r\n      numMachines += 1\r\n      nextIndexToCheck = i + jobDefArr[i]*2 + 1\r\n    }\r\n  }\r\n  jsspProblem.numMachineByJobs.push(numMachines)\r\n})\r\n\r\nreturn jsspProblem\r\n}\r\n\r\n/**\r\n * Returns a new instance of JSSP Problem Instance. \r\n * @param {*} n number of Jobs\r\n * @param {*} m number of Machines\r\n * @param {*} mbar Don't Use\r\n * @param {[[numMachines, machineId1, machineTime1, machineIdN , machineTimeN, numMachines, machineIdx,...  ]]} jobs array of jobs\r\n */\r\nfunction JSSPProblemInstance(n,m,mbar){\r\n    this.numJobs = n;\r\n    this.numMachines = m;\r\n    this.numMachineByJobs = mbar;\r\n    this.jobs = []; // list of lists.\r\n}\r\n\r\nfunction JSSPGanttChartSolution(schedule){\r\n    /**\r\n     * Gantt Chart looks like this:\r\n     * [\r\n     *  [jobId,StartTime,EndTime,jobId,StartTime,EndTime,...]   -> for Machine with Index 0 \r\n     *  [jobId,StartTime,EndTime,...]   -> for Machine with Index 1\r\n     * ]\r\n     * It is useful to have GanttChart in this format because it lets us \r\n     * read the ganttChart in text format without any special help.\r\n     */\r\n    this.schedule = schedule\r\n    this.getMakeSpan = ()=>{\r\n        /**\r\n         * Calculates MakeSpan of an instance of a JSSP Gantt Chart Solution\r\n         * In our definition of ganttChart, we choose last integer of each array if array>0. \r\n         * and return max of them\r\n         */\r\n        const allEnds = this.schedule.map(arrForMachine => {\r\n            if(!arrForMachine.length || arrForMachine.length === 0){\r\n                return 0\r\n            }\r\n            return arrForMachine[arrForMachine.length -1 ]\r\n        });\r\n        return Math.max(...allEnds)\r\n    }\r\n}\r\n\r\n\r\nfunction JSSP1DEncoding(jobs1d){\r\n    /**\r\n     * Most JSSP problems have way too many ways to run, we need to generate options randomly\r\n     * Since randomly generating options is harder in  2d array while meeting all the constraints\r\n     * we will use a 1D Encoding. We also have functions to convert this into Gantt Chart. \r\n     * \r\n     * This can be represented as a singe array as well.\r\n     */\r\n    this.jssp1d = jobs1d\r\n    // Example jssp1d = [0,2,1,0,3,1,0,1,2,3,2,1,1,2,3,0,2,0,3,3]\r\n\r\n    this.JSSP1dToGantt = (jobInstance) => {\r\n        /**\r\n         * Given a 1D solution, convert it into Gantt Chart Solution. \r\n         */\r\n        //const test1D = [0,2,1,0,3,1,0,1,2,3,2,1,1,2,3,0,2,0,3,3]\r\n        // const test1D =[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]\r\n        // const m = 5 // Number of Machines: 0,1,2,3,4,5\r\n        // const n = 4 // Number of Jobs. 0,1,2,3 -> as denoted in the 1d strucutre. \r\n        const ganttChart = []\r\n        for(let i = 0; i<jobInstance.numMachines; i++){\r\n            ganttChart.push([])\r\n        }\r\n        //console.log(ganttChart)\r\n    \r\n        // Next we fill the ganttChart with data based on test1D\r\n        // We need access to the job instance so that we can look at\r\n        \r\n        // Keep Track of last time for each job.\r\n        const lastJobTime = new Array(jobInstance.numJobs).fill(0)\r\n        // console.log(\"Last Job Time\", lastJobTime)\r\n    \r\n        //console.log(jobInstance)\r\n        this.jssp1d.forEach(jobNumber => {\r\n            // job jobNumber is assigned to its respective first. \r\n            const jobDef = jobInstance.jobs[jobNumber]\r\n            // console.log(\"job def is\", jobDef);\r\n            // Get the first one out.\r\n            const firstJob = jobDef.splice(0,2);\r\n            // console.log(`Current Job for Job Number ${jobNumber}  :` ,firstJob)\r\n            const machine = firstJob[0];\r\n            const time = firstJob[1]\r\n            console.log(machine);\r\n            // Now fill Gantt Chart\r\n            const firstAvailableTimeOnMachine = ganttChart[machine].length === 0 ? 0 : ganttChart[machine][ganttChart[machine].length -1]\r\n            // What is the last time of dependent job? We can find that out dependent jobs by looking at job instance from before...\r\n            const _lastJobTime = lastJobTime[jobNumber]\r\n            const firstAvailableTime = Math.max(_lastJobTime,firstAvailableTimeOnMachine)\r\n            lastJobTime[jobNumber] = firstAvailableTime+time\r\n            \r\n            const ganttSchedule = [jobNumber,firstAvailableTime+1,firstAvailableTime+time ]\r\n            ganttChart[machine] = [...ganttChart[machine], ...ganttSchedule]\r\n            \r\n        })\r\n    \r\n        //console.log(ganttChart)\r\n\r\n        return new JSSPGanttChartSolution(ganttChart)\r\n    }\r\n}\r\n\r\nfunction FishesYatesShuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n}\r\n\r\nfunction generateRandom1D(numMachines, numJobs) {\r\n    // We want each jobs repetead numMachines of times. \r\n    let jobs = []\r\n    for(let i = 0;i < numJobs; i++){\r\n        const values = new Array(numMachines).fill(i) // Fill with Job Number \r\n        jobs = [...jobs, ...values]\r\n    }\r\n    const jssp1d = new JSSP1DEncoding(FishesYatesShuffle(jobs))\r\n    return jssp1d\r\n    console.log(jobs)\r\n}\r\n\r\nexport {\r\n    JSSPProblemInstance,\r\n    JSSPGanttChartSolution,\r\n    JSSP1DEncoding,\r\n    FishesYatesShuffle,\r\n    generateRandom1D,\r\n    jobObjectToArrayOfArray,\r\n    generateProblemInstance\r\n}\r\n","import React from 'react';\r\n\r\nclass JobSetup extends React.Component {\r\n    \r\n\r\n    render(){\r\n        return(<p>I M Job Setup </p>)\r\n    }\r\n}\r\n\r\nexport default JobSetup","import React from 'react';\r\n\r\nclass GanttXTicks extends React.Component {\r\n    render(){\r\n        const parentStyle = {\r\n            position:'relative',\r\n            top:`${(this.props.index) * 25}px`,\r\n        }\r\n        const ticks = []\r\n        const maxTimePlus = ((this.props.maxTime/10)+1 )*10\r\n        for(let i = 0; i<maxTimePlus; i++){\r\n            const _startpx = 100* i / this.props.maxTime\r\n            const style = {\r\n                left:`${_startpx}%`,\r\n                transition: 'all 1s linear',\r\n                position:'absolute'\r\n            }\r\n            if(i%10 === 0){\r\n                const tick = <span style={style}>\r\n                    <div>|</div>\r\n                    <div>{i}</div>\r\n                    </span>\r\n                ticks.push(tick);\r\n            }\r\n        }\r\n        return (\r\n            <div style={parentStyle}>\r\n                {ticks}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GanttXTicks","import React from 'react';\r\nimport GanttMachineSchedule from './GanttMachineSchedule';\r\nimport GanttXTicks from './GanttXTicks';\r\n\r\nconst WATER_BOTTLING_WATER_MACHINES = [\r\n    \"Bottle Expansion Mold\",\r\n    \"Water Cleaning/ Purifying\",\r\n    \"Water Filling\",\r\n    \"Bottle Capping\",\r\n    \"Bottle Labeling\",\r\n    \"Bottle Expansion Mold 2\"\r\n]\r\nclass GanttChart extends React.Component {\r\n    render(){\r\n        const allEnds = this.props.schedule.map(schArr => schArr[schArr.length-1])\r\n        const maxTime = Math.max(...allEnds)\r\n        return (\r\n        \r\n            <div className=\"ganttChartWithY\">\r\n                <div className=\"ganttChartYAxis\">\r\n                    {this.props.schedule.map( (sch,idx)=>{\r\n                        const machineName = WATER_BOTTLING_WATER_MACHINES[idx]\r\n                        return <span className=\"yAxisTick\">{`${machineName} Machine`}</span>\r\n                    })}\r\n\r\n                </div>\r\n                <div className=\"ganttChartData\">\r\n                    {this.props.schedule.map( (sch,idx) => \r\n                        <GanttMachineSchedule schedule={sch} maxTime={maxTime} index={idx}/>)}\r\n                    <GanttXTicks index={this.props.schedule.length} maxTime={maxTime} />\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default GanttChart\r\n","const workercode = () => {\r\n    /**\r\n     * Compiled Code -> ES3\r\n     */\r\n    var __assign = (this && this.__assign) || function () {\r\n        __assign = Object.assign || function(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                    t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n    var __spreadArrays = (this && this.__spreadArrays) || function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n    var ResourceTypeEnum;\r\n    (function (ResourceTypeEnum) {\r\n        ResourceTypeEnum[ResourceTypeEnum[\"MACHINE\"] = 0] = \"MACHINE\";\r\n        ResourceTypeEnum[ResourceTypeEnum[\"PERSON\"] = 1] = \"PERSON\";\r\n    })(ResourceTypeEnum || (ResourceTypeEnum = {}));\r\n    var ComplexOperationTypeEnum;\r\n    (function (ComplexOperationTypeEnum) {\r\n        ComplexOperationTypeEnum[ComplexOperationTypeEnum[\"SIMPLE\"] = 0] = \"SIMPLE\";\r\n        ComplexOperationTypeEnum[ComplexOperationTypeEnum[\"CAN_RUN_IN_PARALLEL\"] = 1] = \"CAN_RUN_IN_PARALLEL\";\r\n        ComplexOperationTypeEnum[ComplexOperationTypeEnum[\"CAN_RUN_IN_MULTIPLE_MACINES\"] = 2] = \"CAN_RUN_IN_MULTIPLE_MACINES\";\r\n    })(ComplexOperationTypeEnum || (ComplexOperationTypeEnum = {}));\r\n    var JobShopAlgorithmEnum;\r\n    (function (JobShopAlgorithmEnum) {\r\n        JobShopAlgorithmEnum[JobShopAlgorithmEnum[\"RANDOM\"] = 0] = \"RANDOM\";\r\n        JobShopAlgorithmEnum[JobShopAlgorithmEnum[\"HILL_CLIMBING\"] = 1] = \"HILL_CLIMBING\";\r\n        JobShopAlgorithmEnum[JobShopAlgorithmEnum[\"HILL_CLIMBING_WITH_RESTARTS\"] = 2] = \"HILL_CLIMBING_WITH_RESTARTS\";\r\n        // GENETIC_ALGORITHM\r\n    })(JobShopAlgorithmEnum || (JobShopAlgorithmEnum = {}));\r\n    var RandomAlgorithmEnum;\r\n    (function (RandomAlgorithmEnum) {\r\n        RandomAlgorithmEnum[RandomAlgorithmEnum[\"FISHERYATES\"] = 0] = \"FISHERYATES\";\r\n        RandomAlgorithmEnum[RandomAlgorithmEnum[\"NORANDOM\"] = 1] = \"NORANDOM\"; // this will cause every simulation to run with same job ... only used for benchmarking...\r\n    })(RandomAlgorithmEnum || (RandomAlgorithmEnum = {}));\r\n    var MaterialEnum;\r\n    (function (MaterialEnum) {\r\n        MaterialEnum[MaterialEnum[\"ACETAL\"] = 0] = \"ACETAL\";\r\n        MaterialEnum[MaterialEnum[\"PP\"] = 1] = \"PP\";\r\n    })(MaterialEnum || (MaterialEnum = {}));\r\n    var JobShopProblem = /** @class */ (function () {\r\n        function JobShopProblem() {\r\n            this.resources = new Map();\r\n            this.jobs = new Map();\r\n            this.maxNumberOfSimulations = 100000; // default unless set otherwise\r\n            this.maxSecondsToRun = 30; // default unless set otherwise.\r\n            this.algorithm = JobShopAlgorithmEnum.RANDOM;\r\n            this.hillClimbingRandomRestartPercent = 1; // default use random in 1 percents of the calls. \r\n            this.totalRestarts = 0;\r\n            this.terminationCriteriaFuncs = this.generateDefaultTerminationCriteriaFunctions();\r\n            this.bestMakeSpanLocal = Infinity;\r\n            this.randomAlgorithm = RandomAlgorithmEnum.FISHERYATES;\r\n        }\r\n        JobShopProblem.prototype.addJob = function (job) {\r\n            this.jobs.set(job.id, job);\r\n            // this.calculateNumberOfOperations()\r\n        };\r\n        JobShopProblem.prototype.addOperation = function (jobKey) { };\r\n        JobShopProblem.prototype.updateOperation = function (jobKey) { };\r\n        /**\r\n         * Returns ID of the newly added Machine\r\n         * @param name\r\n         * @param tags\r\n         */\r\n        JobShopProblem.prototype.addMachine = function (name,id,tags) {\r\n            id = id ? id : Array.from(this.resources.keys()).reduce(function (prev, curr) { return curr >= prev ? curr + 1 : prev; }, 0);\r\n            var machine = __assign({ id: id, name: name, type: ResourceTypeEnum.MACHINE }, (tags && { tags: tags }));\r\n            this.resources.set(id, machine);\r\n            return id;\r\n        };\r\n        JobShopProblem.prototype.addResource = function (resource) {\r\n            if (!resource.id) {\r\n                var id = Array.from(this.resources.keys()).reduce(function (prev, curr) { return curr >= prev ? curr + 1 : prev; }, 0);\r\n                var _resource = __assign(__assign({}, resource), { id: id });\r\n                this.resources.set(id, _resource);\r\n                return id;\r\n            }\r\n            else {\r\n                this.resources.set(resource.id, resource);\r\n                return resource.id;\r\n            }\r\n        };\r\n        JobShopProblem.prototype.setSolutionParameters = function (params) {\r\n            if (params.maxNumberOfSimulations) {\r\n                this.maxNumberOfSimulations = params.maxNumberOfSimulations;\r\n            }\r\n            if (params.maxSecondsToRun) {\r\n                this.maxSecondsToRun = params.maxSecondsToRun;\r\n            }\r\n            if (params.algorithm) {\r\n                this.algorithm = params.algorithm;\r\n            }\r\n            if (params.hillClimbingRandomRestartPercent) {\r\n                this.hillClimbingRandomRestartPercent = params.hillClimbingRandomRestartPercent;\r\n            }\r\n            if (params.randomAlgorithm) {\r\n                this.randomAlgorithm = params.randomAlgorithm;\r\n            }\r\n        };\r\n        JobShopProblem.prototype.addTerminationCriteria = function (terminationFunction) {\r\n            // add a new termination criteria\r\n            this.terminationCriteriaFuncs.push(terminationFunction);\r\n            return this.terminationCriteriaFuncs;\r\n        };\r\n        /**\r\n         * SOLVER FUNCTIONS\r\n         */\r\n        JobShopProblem.prototype.isOperationComplex = function (operation) {\r\n            return operation.hasOwnProperty(\"type\") && operation.hasOwnProperty(\"operations\");\r\n        };\r\n        JobShopProblem.prototype.FisherYatesShuffle = function (array) {\r\n            var currentIndex = array.length, temporaryValue, randomIndex;\r\n            // While there remain elements to shuffle...\r\n            while (0 !== currentIndex) {\r\n                // Pick a remaining element...\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex -= 1;\r\n                // And swap it with the current element.\r\n                temporaryValue = array[currentIndex];\r\n                array[currentIndex] = array[randomIndex];\r\n                array[randomIndex] = temporaryValue;\r\n            }\r\n            return array;\r\n        };\r\n        // UNUSED ... TODO > recursively count operations until everthing is counted correctly .... \r\n        JobShopProblem.prototype.countOperations = function (job) {\r\n            var _this = this;\r\n            var count = 0;\r\n            job.operations.forEach(function (op) {\r\n                if (_this.isOperationComplex(op)) {\r\n                    var _op = op;\r\n                    if (_op.type === ComplexOperationTypeEnum.CAN_RUN_IN_PARALLEL) {\r\n                        var _operations = _op.operations;\r\n                        count += _operations.length;\r\n                    }\r\n                    else {\r\n                        count += 1;\r\n                    }\r\n                }\r\n                else {\r\n                    count += 1;\r\n                }\r\n            });\r\n            console.log(\"number of operations is \", count);\r\n            return count;\r\n        };\r\n        JobShopProblem.prototype.oneDToGanttChart = function (oned) {\r\n            var _this = this;\r\n            var ganttChartMachineMap = new Map(); // number is machine ID,  and number[] is schedule for machine. [ Job id, starttime, endTime, ...repeat ]\r\n            this.resources.forEach(function (value, key) {\r\n                ganttChartMachineMap.set(key, []);\r\n            });\r\n            var jobOperationIndexTrackingMap = new Map(); // could do this with array. just easier to read with Map\r\n            this.jobs.forEach(function (value, key) {\r\n                jobOperationIndexTrackingMap.set(key, 0); // start on zero index as in first operation.\r\n            });\r\n            var jobEarliestStartMap = new Map();\r\n            this.jobs.forEach(function (value, key) {\r\n                jobEarliestStartMap.set(key, 0);\r\n            });\r\n            // Helper to add operation \r\n            var addOperationToSchedule = function (operation, jobId) {\r\n                var scheduleSoFar = ganttChartMachineMap.get(operation.machine);\r\n                var earliestMachineAvailableTime = scheduleSoFar.length === 0 ? 0 : scheduleSoFar[scheduleSoFar.length - 1] + 1;\r\n                var earliestJobStartTime = jobEarliestStartMap.get(jobId);\r\n                var job = _this.jobs.get(jobId);\r\n                var startTime = Math.max(earliestMachineAvailableTime, earliestJobStartTime);\r\n                var endTime = startTime + (operation.time * job.requiredInventory);\r\n                if (scheduleSoFar.length === 0) {\r\n                    ganttChartMachineMap.set(operation.machine, [jobId, startTime, endTime]);\r\n                }\r\n                else {\r\n                    ganttChartMachineMap.set(operation.machine, __spreadArrays(scheduleSoFar, [jobId, startTime, endTime]));\r\n                }\r\n                return endTime;\r\n            };\r\n            oned.forEach(function (jobId, idx, arr) {\r\n                var job = _this.jobs.get(jobId);\r\n                var operationIndex = jobOperationIndexTrackingMap.get(jobId);\r\n                var operation = job.operations[operationIndex];\r\n                // adding to schedule \r\n                if (_this.isOperationComplex(operation)) {\r\n                    var complexOperation = operation; // Cast to complex operation type\r\n                    if (complexOperation.type === ComplexOperationTypeEnum.CAN_RUN_IN_PARALLEL) {\r\n                        var endTimes = complexOperation.operations.map(function (operation, idx) {\r\n                            var endTime = addOperationToSchedule(operation, jobId);\r\n                            return endTime;\r\n                        });\r\n                        var maxEndTime = Math.max.apply(Math, endTimes);\r\n                        jobEarliestStartMap.set(jobId, maxEndTime + 1);\r\n                    }\r\n                    else if (complexOperation.type == ComplexOperationTypeEnum.CAN_RUN_IN_MULTIPLE_MACINES) {\r\n                        var randomlyChoosenOperationFromMultipleMachineOptions = complexOperation.operations[Math.floor(Math.random() * complexOperation.operations.length)];\r\n                        var endTime = addOperationToSchedule(randomlyChoosenOperationFromMultipleMachineOptions, jobId); // cast before sending .\r\n                        jobEarliestStartMap.set(jobId, endTime + 1);\r\n                    }\r\n                    else {\r\n                        throw new Error(\"Type not supported yet\");\r\n                    }\r\n                }\r\n                else {\r\n                    // if operation is not complex, we simply add the operation to the schedule.\r\n                    var _operation = operation;\r\n                    var endTime = addOperationToSchedule(_operation, jobId);\r\n                    jobEarliestStartMap.set(jobId, endTime + 1);\r\n                }\r\n                // at the end, incremebt the index of operation ...\r\n                // Open Question? What if the job is of type CAN_BE_SPLIT in 4 equal parts?\r\n                jobOperationIndexTrackingMap.set(jobId, operationIndex + 1);\r\n            });\r\n            return ganttChartMachineMap;\r\n        };\r\n        JobShopProblem.prototype.onedArrayOfJobs = function () {\r\n            var _this = this;\r\n            var getRandomArrayOfJobs = function () {\r\n                var arr = [];\r\n                _this.jobs.forEach(function (v, k) {\r\n                    var opcount = v.operations.length;\r\n                    var a = new Array(opcount).fill(k);\r\n                    arr = arr.concat(a);\r\n                });\r\n                //console.log(\"returning array \", arr)\r\n                // return arr\r\n                if (_this.randomAlgorithm === RandomAlgorithmEnum.NORANDOM) {\r\n                    return arr;\r\n                }\r\n                arr = _this.FisherYatesShuffle(arr);\r\n                return arr;\r\n            };\r\n            var swap = function (base) {\r\n                var randi = Math.floor(Math.random() * base.length);\r\n                var randj = Math.floor(Math.random() * base.length);\r\n                while (base[randi] === base[randj]) { // no point in swapping the same number.\r\n                    randj = Math.floor(Math.random() * base.length);\r\n                }\r\n                var randiVal = base[randi];\r\n                base[randi] = base[randj];\r\n                base[randj] = randiVal;\r\n                return base;\r\n            };\r\n            if (!this.best1Dsolution) {\r\n                return getRandomArrayOfJobs();\r\n            }\r\n            if (this.algorithm === JobShopAlgorithmEnum.RANDOM) {\r\n                return getRandomArrayOfJobs();\r\n            }\r\n            else if (this.algorithm === JobShopAlgorithmEnum.HILL_CLIMBING) {\r\n                return swap(this.best1Dsolution);\r\n            }\r\n            else if (this.algorithm === JobShopAlgorithmEnum.HILL_CLIMBING_WITH_RESTARTS) {\r\n                var randomPercent = Math.random() * 100;\r\n                // eg: percent = 20.There is a 20% chance that randomPercent is 20 or less. \r\n                // so if randomPercent is 20 or less, we add randomness, else we keep hill climbing. \r\n                var useRandom = randomPercent < this.hillClimbingRandomRestartPercent ? true : false;\r\n                if (useRandom) {\r\n                    this.totalRestarts += 1;\r\n                    //makeSpansForCsv.push(90000)\r\n                    var oned = getRandomArrayOfJobs();\r\n                    this.best1DSolutionLocal = oned; //rest best1DSolutionLocal\r\n                    this.bestMakeSpanLocal = Infinity;\r\n                    return oned;\r\n                }\r\n                else {\r\n                    return swap(this.best1DSolutionLocal);\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(\"Not implemented\");\r\n            }\r\n        };\r\n        JobShopProblem.prototype.costFunction = function (ganttChart) {\r\n            var makeSpan = Array.from(ganttChart.values()).reduce(function (prev, currentListOfSchedules) {\r\n                var lastTime = currentListOfSchedules[currentListOfSchedules.length - 1];\r\n                if (lastTime > prev) {\r\n                    return lastTime;\r\n                }\r\n                return prev;\r\n            }, 0);\r\n            return makeSpan;\r\n        };\r\n        JobShopProblem.prototype.generateDefaultTerminationCriteriaFunctions = function () {\r\n            var funcs = [];\r\n            if (this.maxNumberOfSimulations) {\r\n                var terminateBasedOnNumberOfSimulations = function (args) {\r\n                    if (args.currentSimulationIndex > args.maxNumberOfSimulations) {\r\n                        return true;\r\n                    }\r\n                    return false; //otherwise return false\r\n                };\r\n                funcs.push(terminateBasedOnNumberOfSimulations);\r\n            }\r\n            if (this.maxSecondsToRun) {\r\n                var terminateBasedOnMaxSecondsSinceStart = function (args) {\r\n                    var terminationTime = new Date(args.simulationStartTime.getTime());\r\n                    terminationTime.setSeconds(terminationTime.getSeconds() + args.maxSecondsToRun);\r\n                    if (new Date() > terminationTime) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n                funcs.push(terminateBasedOnMaxSecondsSinceStart);\r\n            }\r\n            return funcs;\r\n        };\r\n        JobShopProblem.prototype.solve = function (postMessage) {\r\n            console.log(\"solving\");\r\n            var currentSimCount = 0;\r\n            var terminateNow;\r\n            var bestGanttChart;\r\n            var bestMakeSpan = +Infinity;\r\n            var bestMakeSpanIndex = 0;\r\n            var makeSpanHistory = [];\r\n            var defaultTerminationArgs = {\r\n                currentSimulationIndex: currentSimCount,\r\n                simulationStartTime: new Date(),\r\n                maxNumberOfSimulations: this.maxNumberOfSimulations,\r\n                maxSecondsToRun: this.maxSecondsToRun,\r\n                algorithm: this.algorithm\r\n            };\r\n            while (!terminateNow) {\r\n                // Update current Sim Count to run on termination criteria functions.\r\n                defaultTerminationArgs.currentSimulationIndex = currentSimCount;\r\n                var terminatedList = this.terminationCriteriaFuncs.map(function (f) { return f(defaultTerminationArgs); });\r\n                terminateNow = terminatedList.reduce(function (prev, curr) { return curr ? true : prev; }, false);\r\n                // print to screen every so often\r\n                // if (currentSimCount % 10) {\r\n                //     process.stdout.write(\"Running simulation \" + currentSimCount + \" of \" + this.maxNumberOfSimulations + \". RS \" + this.totalRestarts + \" Best MakeSpan so far \" + bestMakeSpan + \" on simulation number \" + bestMakeSpanIndex + \" \\r\");\r\n                // }\r\n\r\n                var oned = this.onedArrayOfJobs();\r\n                var ganttChart = this.oneDToGanttChart(oned);\r\n                var makespan = this.costFunction(ganttChart);\r\n                //console.log(\"makespan is \", makespan)\r\n                if (makespan < bestMakeSpan) {\r\n                    // output global makespan value here.\r\n                    bestMakeSpan = makespan;\r\n                    bestGanttChart = ganttChart;\r\n                    this.best1Dsolution = oned;\r\n                    bestMakeSpanIndex = currentSimCount;\r\n\r\n                    postMessage(\"Got New MakeSpan\")\r\n                    const returnData = {\r\n                        'type':'newSchedule',\r\n                        'schedule':bestGanttChart,\r\n                        'makeSpan':makespan,\r\n                        \"minMakeSpanDetectedIteration\": currentSimCount\r\n                    }\r\n                    postMessage(returnData);\r\n                    sleep(1000) // Allow time for UI to update\r\n                }\r\n                if (this.algorithm === JobShopAlgorithmEnum.HILL_CLIMBING_WITH_RESTARTS) {\r\n                    if (makespan < this.bestMakeSpanLocal) {\r\n                        // send makespan value here for hill climbing with restarts...\r\n                        this.bestMakeSpanLocal = makespan;\r\n                        this.best1DSolutionLocal = oned;\r\n                    }\r\n                }\r\n                currentSimCount += 1;\r\n\r\n                /**\r\n                 * CODE FOR LOGGING TO THE UI \r\n                 */\r\n                let newMakeSpanToPushToUI;\r\n                switch (this.algorithm) {\r\n                    case JobShopAlgorithmEnum.RANDOM:\r\n                        newMakeSpanToPushToUI = makespan\r\n                        break;\r\n                    case JobShopAlgorithmEnum.HILL_CLIMBING:\r\n                        newMakeSpanToPushToUI = bestMakeSpan\r\n                        break;\r\n                    case JobShopAlgorithmEnum.HILL_CLIMBING_WITH_RESTARTS:\r\n                        newMakeSpanToPushToUI = this.bestMakeSpanLocal\r\n                        break;\r\n                    default:\r\n                        newMakeSpanToPushToUI = makespan\r\n                }\r\n                makeSpanHistory.push(newMakeSpanToPushToUI)\r\n                let send;\r\n                if(currentSimCount < 100){\r\n                    send = currentSimCount % 1 === 0\r\n                } else if (currentSimCount < 1000){\r\n                    send = currentSimCount % 10 === 0\r\n                } else {\r\n                    send = currentSimCount % 100 === 0\r\n                }\r\n                if(send){\r\n                    const returnData = {\r\n                        type:'iterationCount',\r\n                        iteration:currentSimCount,\r\n                        newMakeSpan:makeSpanHistory\r\n                    }\r\n                    postMessage(returnData);\r\n                    //sleep(200) // Give UI thread enough time to render this.\r\n                    makeSpanHistory.length = 0 // delete the array\r\n                }\r\n            }\r\n            // clear one last time ... \r\n            if(makeSpanHistory.length > 0 ){\r\n                const returnData = {\r\n                    type:'iterationCount',\r\n                    iteration:currentSimCount,\r\n                    newMakeSpan:makeSpanHistory\r\n                }\r\n                postMessage(returnData);\r\n            }\r\n            console.log(\"Termination criteria passed\");\r\n            console.log(\"shortest makespan is \", bestMakeSpan);\r\n            // console.log(bestGanttChart)\r\n            return {\r\n                bestGanttChart: bestGanttChart,\r\n                bestMakeSpan: bestMakeSpan,\r\n                bestMakeSpanIndex: bestMakeSpanIndex\r\n            };\r\n        };\r\n        return JobShopProblem;\r\n    }());\r\n    const JSSPProblemInstance = (n,m,mbar) => {\r\n        this.numJobs = n;\r\n        this.numMachines = m;\r\n        this.numMachineType = mbar;\r\n        this.jobs = []; // list of lists.\r\n    }\r\n    \r\n    const JSSPGanttChartSolution = function(schedule){\r\n        /**\r\n         * Gantt Chart looks like this:\r\n         * [\r\n         *  [jobId,StartTime,EndTime,jobId,StartTime,EndTime,...]   -> for Machine with Index 0 \r\n         *  [jobId,StartTime,EndTime,...]   -> for Machine with Index 1\r\n         * ]\r\n         * It is useful to have GanttChart in this format because it lets us \r\n         * read the ganttChart in text format without any special help.\r\n         */\r\n        this.schedule = schedule\r\n        this.getMakeSpan = ()=>{\r\n            /**\r\n             * Calculates MakeSpan of an instance of a JSSP Gantt Chart Solution\r\n             * In our definition of ganttChart, we choose last integer of each array if array>0. \r\n             * and return max of them\r\n             */\r\n            const allEnds = this.schedule.map(arrForMachine => {\r\n                if(!arrForMachine.length || arrForMachine.length === 0){\r\n                    return 0\r\n                }\r\n                return arrForMachine[arrForMachine.length -1 ]\r\n            });\r\n            let max = -Infinity;\r\n            allEnds.forEach(item => {\r\n                if(item > max){\r\n                    max = item\r\n                }\r\n            })\r\n            return max\r\n            //return Math.max(...allEnds)\r\n        }\r\n    }\r\n    \r\n    \r\n    function JSSP1DEncoding(jobs1d){\r\n        /**\r\n         * Most JSSP problems have way too many ways to run, we need to generate options randomly\r\n         * Since randomly generating options is harder in  2d array while meeting all the constraints\r\n         * we will use a 1D Encoding. We also have functions to convert this into Gantt Chart. \r\n         * \r\n         * This can be represented as a singe array as well.\r\n         */\r\n        this.jssp1d = jobs1d\r\n    \r\n        this.JSSP1dToGantt = (jobInstance) => {\r\n            /**\r\n             * Given a 1D solution, convert it into Gantt Chart Solution. \r\n             * example of 1D solution for m = 5, n = 4 : [0,2,1,0,3,1,0,1,2,3,2,1,1,2,3,0,2,0,3,3]\r\n             */\r\n            const ganttChart = []\r\n            for(let i = 0; i<jobInstance.numMachines; i++){\r\n                ganttChart.push([])\r\n            }\r\n        \r\n            // Next we fill the ganttChart with data based on test1D\r\n            // We need access to the job instance so that we can look at\r\n            \r\n            // Keep Track of last time for each job.\r\n            const lastJobTime = new Array(jobInstance.numJobs).fill(0)\r\n            this.jssp1d.forEach(jobNumber => {\r\n                // job jobNumber is assigned to its respective first. \r\n                const jobDef = jobInstance.jobs[jobNumber]\r\n                const numberOfMachinesAllowed = jobDef[0]; // 1 -> slice to 2*1 + 1 = 3. 2 slice to 5.\r\n                const sliceEnd = 2*numberOfMachinesAllowed + 1;\r\n                const firstJob = jobDef.splice(0,sliceEnd);\r\n                /** Next up -> we have numberofMachinesallowed say 3. firs job = [3,1,20,3,30,4,50]\r\n                 * We will randomly choose a machine from given machines.\r\n                */\r\n                const jobList = []\r\n                for(let i = 0; i < numberOfMachinesAllowed; i++ ){\r\n                   const unitJob = [firstJob[i*2 + 1], firstJob[i*2 + 2]]\r\n                   jobList.push(unitJob)\r\n                }\r\n                \r\n                const choosenMachineJob = randomFromArray(jobList);\r\n                //const allowedMachinesWithTimeRequirement = firstJob.\r\n                const machine = choosenMachineJob[0]; // In this step randomly choose machine out of available ones.\r\n                const time = choosenMachineJob[1]\r\n        \r\n                // Now fill Gantt Chart\r\n                const firstAvailableTimeOnMachine = ganttChart[machine].length === 0 ? 0 : ganttChart[machine][ganttChart[machine].length -1]\r\n                \r\n                // What is the last time of dependent job? We can find that out dependent jobs by looking at job instance from before...\r\n                const _lastJobTime = lastJobTime[jobNumber]\r\n                const firstAvailableTime = Math.max(_lastJobTime,firstAvailableTimeOnMachine)\r\n                lastJobTime[jobNumber] = firstAvailableTime+time\r\n                \r\n                const ganttSchedule = [jobNumber,firstAvailableTime+1,firstAvailableTime+time ]\r\n                ganttSchedule.forEach(item => ganttChart[machine].push(item))\r\n                \r\n            })\r\n            \r\n            return new JSSPGanttChartSolution(ganttChart)\r\n        }\r\n    }\r\n    \r\n    function FishesYatesShuffle(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n      \r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n      \r\n          // Pick a remaining element...\r\n          randomIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex -= 1;\r\n      \r\n          // And swap it with the current element.\r\n          temporaryValue = array[currentIndex];\r\n          array[currentIndex] = array[randomIndex];\r\n          array[randomIndex] = temporaryValue;\r\n        }\r\n      \r\n        return array;\r\n    }\r\n    \r\n    function randomFromArray(array){\r\n        // Given an array of length l, return a random item.\r\n        const randomIndex = Math.floor(Math.random() * array.length)\r\n        return array[randomIndex] // TODO produce random item.\r\n    }\r\n    \r\n    function generateRandom1D(numMachineByJobs, numJobs, base, nswap) {\r\n        /**\r\n         * For Non-Flexible Job Shop Problems, each job has to go through all the same machines.\r\n         * For Flexible Job Shop Problems, each job has to go through a arbitrary number of machines.\r\n         *     Hence we'll need a data structure that holds number of machines for each job. \r\n         *     GenerateRandom1D function can take that datastructure and operate on it. \r\n         *     numJobs = 2\r\n         *     numMachines =  [2,2] -> job 0 needs numMachines[0] jobs etc...\r\n         */\r\n        if (base){\r\n            // if base is passed in - just do a swap once. nswap not used at the moment.\r\n            function swap(){\r\n                const randi = Math.floor(Math.random() * base.length )\r\n                let randj = Math.floor(Math.random() * base.length )\r\n                while(base[randi] === base[randj]){ // no point in swapping the same number.\r\n                    randj = Math.floor(Math.random() * base.length )\r\n                }\r\n                const randiVal = base[randi]\r\n                base[randi] = base[randj]\r\n                base[randj] = randiVal\r\n            }\r\n            swap()\r\n            return new JSSP1DEncoding(base) // spread to avoid side effects.\r\n        }\r\n        // We want each jobs repetead numMachines of times. \r\n        let jobs = []\r\n        for(let i = 0;i < numJobs; i++){\r\n            // TODO > Instead of numMachines\r\n            for(let j = 0; j < numMachineByJobs[i]; j++){\r\n                jobs.push(i)\r\n            }\r\n        }\r\n        const jssp1d = new JSSP1DEncoding(FishesYatesShuffle(jobs))\r\n        return jssp1d\r\n    };\r\n    function sleep(miliseconds) { \r\n        /**\r\n         * Evil sleep function used for demoing simulation.\r\n         * Since the example problem I am using solves really fast, I am adding sleep in the thread.\r\n         * TODO >> Actually use setTimeOut to accomplish the same thing so thread isn't running while waiting.\r\n         */\r\n        var currentTime = new Date().getTime();\r\n     \r\n        while (currentTime + miliseconds >= new Date().getTime()) {\r\n        }\r\n     }\r\n     \r\n    function _runOptimizationAlgo(problem, algorithmRepetition, algorithmMaxTimeSecs, algorithmType) {\r\n        let makeSpan = Infinity;\r\n        const algoStartTime = (new Date).getTime();\r\n        const algoMaxEndTime = algoStartTime + (algorithmMaxTimeSecs * 1000)\r\n        const makeSpanHistory = []\r\n        let bestSolution1DEncoded;  // Store the best solution encoded in 1d so far.\r\n        for(let i = 0; i < algorithmRepetition; i ++){\r\n            if( (i%5===0) && (new Date).getTime() > algoMaxEndTime) {\r\n                console.log(\"Ran for too long already\")\r\n                break;\r\n            }\r\n            // alternative\r\n            if( (i%100==0) && (new Date).getTime() > algoMaxEndTime){ //Run time check every 100th run.\r\n                console.log(\"Ending because of time limit\")\r\n                console.log(\"Ran times : \" , i)\r\n                break;\r\n            }\r\n            const randomizedInput = generateRandom1D(problem.numMachineByJobs, problem.numJobs, algorithmType === \"hillClimbing\" ? bestSolution1DEncoded && bestSolution1DEncoded.jssp1d : null)\r\n            const problemCopy = Object.assign({}, problem)\r\n            problemCopy.jobs = JSON.parse(JSON.stringify(problem.jobs))\r\n\r\n            const ganttFromRandInput = randomizedInput.JSSP1dToGantt(problemCopy)\r\n            const newMakeSpan = ganttFromRandInput.getMakeSpan();\r\n\r\n            makeSpanHistory.push(newMakeSpan)\r\n            if(i%1  === 0){\r\n                const returnData = {\r\n                    type:'iterationCount',\r\n                    iteration:i+1,\r\n                    newMakeSpan:makeSpanHistory\r\n                }\r\n                this.postMessage(returnData);\r\n                sleep(1*200) // Give UI thread enough time to render this.\r\n                makeSpanHistory.length = 0\r\n            }\r\n            \r\n            // console.log(ganttFromRandInput.schedule[0])\r\n            if(newMakeSpan < makeSpan){\r\n                makeSpan = newMakeSpan\r\n                bestSolution1DEncoded = randomizedInput\r\n                this.postMessage(\"Got New MakeSpan\")\r\n                const returnData = {\r\n                    'type':'newSchedule',\r\n                    'schedule':ganttFromRandInput.schedule,\r\n                    'makeSpan':makeSpan,\r\n                    \"minMakeSpanDetectedIteration\": i\r\n                }\r\n                this.postMessage(returnData);\r\n                sleep(1*1000)\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    onmessage = function(e) {\r\n        const that = this;\r\n        const { problem, algorithmRepetition, algorithmMaxTimeSecs, algorithmType, machines, jobs } = e.data; \r\n        // console.log(problem, algorithmMaxTimeSecs);\r\n        // _runOptimizationAlgo(problem, algorithmRepetition, algorithmMaxTimeSecs, algorithmType, that)\r\n        const jsspSolver = new JobShopProblem();\r\n\r\n        machines.forEach((machine, index) => {\r\n            jsspSolver.addMachine(machine.name, machine.id)\r\n        })\r\n        jobs.forEach((job, index) => {\r\n            const operations = []\r\n            job.operations.forEach((operation, index) => {\r\n                if(operation.machineAndTimes.length > 1){\r\n                    // add complex operation \r\n                    const complexOperation = {\r\n                        type: ComplexOperationTypeEnum.CAN_RUN_IN_MULTIPLE_MACINES,\r\n                        operations: operation.machineAndTimes.map(mat => {\r\n                            return {\r\n                                machine: parseInt(mat[0]),\r\n                                time: parseInt(mat[1])\r\n                            }\r\n                        })\r\n                    }\r\n                    operations.push(complexOperation)\r\n                } else {\r\n                    // add simple operation\r\n                    operations.push({\r\n                        machine: parseInt(operation.machineAndTimes[0][0]),\r\n                        time: parseInt(operation.machineAndTimes[0][0])\r\n                    })\r\n                }\r\n            })\r\n            jsspSolver.addJob({\r\n                id: job.id,\r\n                name: job.name,\r\n                operations: operations,\r\n                requiredInventory: 1\r\n            })\r\n        })\r\n        let algo;\r\n        if(algorithmType === \"random\"){\r\n            algo = JobShopAlgorithmEnum.RANDOM\r\n        } else if (algorithmType === \"hillClimbing\"){\r\n            algo = JobShopAlgorithmEnum.HILL_CLIMBING\r\n        } else {\r\n            algo = JobShopAlgorithmEnum.HILL_CLIMBING_WITH_RESTARTS\r\n        }\r\n        const solParams = {\r\n            maxNumberOfSimulations:algorithmRepetition,\r\n            maxSecondsToRun: algorithmMaxTimeSecs,\r\n            algorithm: algo,\r\n            hillClimbingRandomRestartPercent: 0.1, // restart 0.0001 percent of the time. Gives the algorithm enough time to discover a local minima.\r\n            randomAlgorithm: RandomAlgorithmEnum.FISHERYATES\r\n            // Smaller than number better chance the algorithm has to discover local minima... important during large \r\n        }\r\n    \r\n        jsspSolver.setSolutionParameters(solParams)\r\n        const bestGanttChart = jsspSolver.solve(this.postMessage);\r\n        console.log(\"returning bestGanttChart\")\r\n        console.log(bestGanttChart)\r\n        var workerResult = 'Received from main: ' + (e.data);\r\n        this.postMessage(workerResult);\r\n    }\r\n};\r\n\r\nlet code = workercode.toString();\r\ncode = code.substring(code.indexOf(\"{\")+1, code.lastIndexOf(\"}\"));\r\n\r\nconst blob = new Blob([code], {type: \"application/javascript\"});\r\nconst worker_script = URL.createObjectURL(blob);\r\n\r\nexport default worker_script;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, LineSeries, HorizontalGridLines, VerticalGridLines, XAxis, YAxis} from 'react-vis';\r\n\r\nclass TwoDPlot extends Component {\r\n  render() {\r\n    // Get props.data = [123,345,345,999 ...] from parent. \r\n    const data = this.props.data.map((val,idx)=>{\r\n      return {\r\n        x: idx,\r\n        y: val\r\n      }\r\n    })\r\n\r\n    return (\r\n      <div className=\"twodplot\">\r\n        <div>\r\n          <XYPlot height={this.props.height || 300} width={this.props.width || 300}>\r\n            <LineSeries data={data} />\r\n            <XAxis title=\"Number of Iterations\" />\r\n            <YAxis title=\"MakeSpan\" />\r\n            <VerticalGridLines />\r\n            <HorizontalGridLines />\r\n          </XYPlot>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TwoDPlot\r\n","import React from 'react';\r\nimport './App.css';\r\nimport GanttChart from './GattChart';\r\nimport jobIdToColour from './jobIdToColor';\r\nimport WebWorkerScript from './worker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { JSSPProblemInstance } from './JSSP';\r\nimport { NavBar } from './components/navbar';\r\nimport TwoDPlot from './TwoDPlot';\r\nimport  { jobObjectToArrayOfArray, generateProblemInstance } from './JSSP';\r\n\r\n// Create a new instance of JSSPProblemInstance and assign jobs for water bottle plant.\r\n\r\nconst problemStatic = new JSSPProblemInstance(5,6) // Instantiate with no data. j jobs and m machines.\r\n/**\r\n * Water Bottoling Plant that does 4 different types of water bottles. \r\n * Job 0 - Spring Water 16oz\r\n * Job 1 - Distilled Water 16 oz\r\n * Job 2 - Distilled Water 32 oz\r\n * Job 4 - Bottoled Water 32 oz\r\n * \r\n * We have 5 machines for different operations\r\n * Machine 0 - Bottle Expansion Molding\r\n * Machine 1 - Water Cleaning or purifying Machine \r\n * Machine 2 - Pouring water / Filling Process \r\n * Machine 3 - Capping\r\n * Machine 4 - Labelling\r\n * \r\n * Jobs must be run in the following order\r\n//  */\r\nproblemStatic.jobs = [\r\n  // Read it as follows:\r\n  // first job -> first step can run on 2 machines. Machine 0 for time 10 OR Machine 5 for time 20, next it runs on 1 machine - machine 1 for time 10 etc.\r\n  [2, 0, 10, 5, 20, 1, 1, 10, 1, 2, 10, 1, 3, 10, 1, 4, 8, 1, 4, 10, 1, 4, 10],\r\n  // second Job -> first step can run on 2 machines. Machine 0 for time 50 OR machine 5 for time 30, second step on 1 machine - machine 1 for 15 times\r\n  [2, 0, 50, 5, 30, 1, 1, 15, 1, 2, 10, 1, 3, 10,],// 1, 4, 16], // Very Very Flexible...\r\n  [2, 0, 30, 5, 50, 1, 1, 12, 1, 2, 20, 1, 3, 10, 1, 4, 16],\r\n  [2, 0, 15, 5, 20, 1, 1, 30, 1, 2, 20, 1, 3, 10, 1, 4, 10],\r\n  [1, 2, 120]\r\n]\r\n\r\n// Infer number of machines the job needs to run based on job definition.\r\nproblemStatic.numMachineByJobs = []\r\nproblemStatic.jobs.forEach(jobDefArr => {\r\n  let numMachines = 0\r\n  let nextIndexToCheck = 0;\r\n  for(let i = 0; i < jobDefArr.length; i++ ){\r\n    if(i === nextIndexToCheck){\r\n      numMachines += 1\r\n      nextIndexToCheck = i + jobDefArr[i]*2 + 1\r\n    }\r\n  }\r\n  problemStatic.numMachineByJobs.push(numMachines)\r\n})\r\n// Example Problem Statement\r\n// problem.jobs = [ \r\n//   [ 0, 10, 1, 20, 2, 20, 3, 40, 4, 10 ],\r\n//   [ 1, 20, 0, 10, 3, 30, 2, 50, 4, 30 ],\r\n//   [ 2, 30, 1, 20, 4, 12, 3, 40, 0, 10 ],\r\n//   [ 4, 50, 3, 30, 2, 15, 0, 20, 1, 15 ] ]\r\n\r\n// Complicated Problem Statement -> Uncomment below..\r\n// problem.numJobs = 10\r\n// problem.numMachines = 10\r\n// problem.jobs = [\r\n// [ 4, 88, 8, 68, 6, 94, 5, 99, 1, 67, 2, 89, 9, 77, 7, 99, 0, 86, 3, 92 ],\r\n// [ 5, 72, 3, 50, 6, 69, 4, 75, 2, 94, 8, 66, 0, 92, 1, 82, 7, 94, 9, 63 ],\r\n// [ 9, 83, 8, 61, 0, 83, 1, 65, 6, 64, 5, 85, 7, 78, 4, 85, 2, 55, 3, 77 ],\r\n// [ 7, 94, 2, 68, 1, 61, 4, 99, 3, 54, 6, 75, 5, 66, 0, 76, 9, 63, 8, 67 ],\r\n// [ 3, 69, 4, 88, 9, 82, 8, 95, 0, 99, 2, 67, 6, 95, 5, 68, 7, 67, 1, 86 ],\r\n// [ 1, 99, 4, 81, 5, 64, 6, 66, 8, 80, 2, 80, 7, 69, 9, 62, 3, 79, 0, 88 ],\r\n// [ 7, 50, 1, 86, 4, 97, 3, 96, 0, 95, 8, 97, 2, 66, 5, 99, 6, 52, 9, 71 ],\r\n// [ 4, 98, 6, 73, 3, 82, 2, 51, 1, 71, 5, 94, 7, 85, 0, 62, 8, 95, 9, 79 ],\r\n// [ 0, 94, 6, 71, 3, 81, 7, 85, 1, 66, 2, 90, 4, 76, 5, 58, 8, 93, 9, 97 ],\r\n// [ 3, 50, 0, 59, 1, 82, 8, 67, 7, 56, 9, 96, 6, 58, 4, 81, 5, 59, 2, 96 ]\r\n// ]\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      schedule:[[],[]],\r\n      makeSpan:Infinity,\r\n      minMakeSpanDetectedIteration:0,\r\n      iterations:0,\r\n      workerInstance : new Worker(WebWorkerScript),\r\n      makeSpanHistory:[],\r\n      maxAlgorithmRepetition:10000,\r\n      algorithmMaxTimeSecs:30,\r\n      algorithmType: 'hillClimbingRestarts' // random || hillClimbing || hillClimbingRestarts\r\n    }\r\n  }\r\n  startJobShopWorker = () => {\r\n    console.log(\"started worker\")\r\n    const workerInstance = new Worker(WebWorkerScript);\r\n    \r\n    workerInstance.addEventListener(\"message\", e => {\r\n      // We can have 2 different data types or a generic message stored in e.data\r\n      // {\"type\":\"iterationCount\",\"value\":200}\r\n      // {\"type\":\"newSchedule\",\"value\":[[],...]}\r\n      if(e.data && e.data.type === \"iterationCount\"){\r\n        this.setState({\r\n          iterations:e.data.iteration,\r\n          makeSpanHistory:[...this.state.makeSpanHistory,...e.data.newMakeSpan]\r\n        })\r\n      }\r\n      else if(e.data && e.data.type === \"newSchedule\"){\r\n        const schedule = []\r\n        e.data.schedule.forEach((value, key) => {\r\n          console.log(value)\r\n          schedule.push(value)\r\n        })\r\n        this.setState({\r\n          schedule : schedule, \r\n          makeSpan:e.data.makeSpan,\r\n          minMakeSpanDetectedIteration: e.data.minMakeSpanDetectedIteration\r\n        });\r\n      } else {\r\n        console.log(\"generic Message \", e.data);\r\n      } \r\n    }, false);\r\n    \r\n    const problem = generateProblemInstance(this.props.jobs, this.props.machines);\r\n    // const problem = problemStatic // OLD \r\n    workerInstance.postMessage({\r\n      algorithmRepetition:this.state.maxAlgorithmRepetition,\r\n      problem:problem,\r\n      algorithmMaxTimeSecs:this.state.algorithmMaxTimeSecs,\r\n      algorithmType: this.state.algorithmType,\r\n      machines: this.props.machines, \r\n      jobs: this.props.jobs\r\n    })\r\n\r\n    this.setState({\r\n      workerInstance: workerInstance,\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.startJobShopWorker()\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot){\r\n    if( (prevProps.jobs !== this.props.jobs) || (prevProps.machines !== this.props.machines) ){\r\n      console.log(\"props changed, so restarting the simulation\")\r\n      this.state.workerInstance.terminate();\r\n      this.startJobShopWorker()\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    this.state.workerInstance.terminate();\r\n  }\r\n  handleChange = (event)=>{\r\n    this.setState({[event.target.name]: event.target.value});\r\n  }\r\n\r\n  handleRestartJobShopWorkerButton = (e)=>{\r\n    e.preventDefault();\r\n    this.state.workerInstance.terminate();\r\n    this.setState({\r\n      schedule:[[],[]],\r\n      makeSpan:Infinity,\r\n      minMakeSpanDetectedIteration:0,\r\n      iterations:0,\r\n      makeSpanHistory:[],\r\n    },this.startJobShopWorker() )\r\n    \r\n  }\r\n  handleStopWorker = (e) => {\r\n    this.state.workerInstance.terminate();\r\n  }\r\n  render(){\r\n    const screenWidth = (window.innerWidth - 60)\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"d-flex factory-navbar bg-color-app-secondary\">\r\n          <li className=\"nav-item no-list-style\">\r\n            <select className=\"form-control ml-2\" name=\"algorithmType\" onChange={this.handleChange} value={this.state.algorithmType}>\r\n              <option value=\"random\">Random Search</option>\r\n              <option value=\"hillClimbing\">Hill Climbing Search</option>\r\n              <option value=\"hillClimbingRestarts\">Hill Climbing With Restarts</option>\r\n            </select>\r\n          </li> \r\n\r\n          <li className=\"nav-item ml-2 no-list-style\">\r\n            <button className=\"btn btn-outline-danger ml-2\" onClick={this.handleStopWorker}> Stop </button>\r\n          </li>\r\n          \r\n          <li className=\"nav-item ml-2 no-list-style\">\r\n            <button className=\"btn btn-outline-success\" onClick={this.handleRestartJobShopWorkerButton}>  Restart with new settings </button>\r\n          </li>\r\n        </nav>\r\n        \r\n\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <table className=\" table table-sm mt-2\">\r\n                <thead>\r\n                  <tr>\r\n                    <th colSpan={2}>Simulation Parameters </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Number of Simulations</td>\r\n                    <td>{this.state.iterations} </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Minimal Makespan Detected</td>\r\n                    <td>{this.state.makeSpan}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Min detected after iteration</td>\r\n                    <td>{this.state.minMakeSpanDetectedIteration}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n            </div>\r\n            <div className=\"col\">\r\n              <table className=\"table table-sm mt-2\">\r\n                <thead>\r\n                  <tr>\r\n                    <th colSpan={2}>Termination Criteria</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Number of Simuations</td>\r\n                    <td>\r\n                      <input type=\"number\" style={{width:'4em'}} name=\"maxAlgorithmRepetition\" onChange={this.handleChange} value={this.state.maxAlgorithmRepetition}/>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Maximum Time in seconds</td>\r\n                    <td>\r\n                      <input type=\"number\" style={{width:'4em'}} name=\"algorithmMaxTimeSecs\" onChange={this.handleChange} value={this.state.algorithmMaxTimeSecs} className=\"form-controll\" placeholder=\"Max number of iterations\"/>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{marginTop:'10px'}}>\r\n          <h6>Plot of makespan during each different simulation</h6>\r\n          <TwoDPlot data={this.state.makeSpanHistory} width={screenWidth} />\r\n        </div>\r\n        <hr></hr>\r\n        <h6>Schedule with the least makespan</h6>\r\n        <GanttChart schedule={this.state.schedule}/>\r\n        \r\n\r\n        <div className=\"explanation\">\r\n\r\n        <p>\r\n        The Chart above shows the order in which each operation in a water bottling plant must run on each machine to complete all bottling activities in the most efficient manner. \r\n        Watch the chart change as the algorithm finds more and more efficient way to run the factory over time. Simulation is slowed down for demonstration purpose.\r\n        Run the simulations with different settings below: \r\n        </p>\r\n                \r\n        <hr></hr>\r\n        <h3>Explanation</h3>\r\n\r\n          In this demo, we are trying to optimize how to run a water bottling plant. \r\n          <ul>\r\n            <li>The machines and the operations required for each job is listed in the machines tab. Feel free to click there to take a peek.</li>\r\n            <li>The operation sequence for each job is listed under Jobs menu</li>\r\n          </ul>\r\n          We have {this.props.machines.length} machines for different operations, and various different types of products we need to produce.\r\n\r\n\r\n        <ol>\r\n          {this.props.machines.map( (m, idx )=> {\r\n            return <li key={m.id}>\r\n              Machine Id {m.id} - {m.name}\r\n            </li>\r\n          })}\r\n        </ol>\r\n\r\n        This factory produces {this.props.jobs.length} different types of water bottles, and each water bottling operation must be run in the following order:\r\n        <ol>\r\n          {this.props.jobs.map((j,idx)=>{\r\n            return <li key={j.id}>\r\n              <span style={{backgroundColor:`${jobIdToColour(idx)}`}}>Job id {j.id} - {j.name} </span>\r\n              <ol>\r\n                {j.operations.map((o, idx) => {\r\n                  const allMachineTimes = o.machineAndTimes.map(mt => {\r\n                    return `| ${mt[1]} Seconds if run on Machine ${mt[0]} |`\r\n                  })\r\n                  return <li key={idx}>{o.operationName}\r\n                    - {allMachineTimes}\r\n                  </li>\r\n                })}\r\n              </ol>\r\n            </li>\r\n          })}\r\n          \r\n        </ol>\r\n\r\n        Algorithm that runs in the background finds the most optimal way of running all the jobs in the given order. \r\n\r\n        The Chart shows the order in which each job must run on each machine to complete all bottling activities in the most efficient manner. \r\n        Watch the chart change as the algorithm finds more and more efficient way to run the factory. \r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport MainAppNavBar from './mainAppComponents/mainAppNavBar';\r\nimport Machines from './Pages/Machines';\r\nimport Categories from './Pages/Categories';\r\nimport JobEditor from './Pages/Jobs';\r\nimport Parameters from './mainAppComponents/Parameters';\r\nimport { JSSPProblemInstance } from './JSSP';\r\nimport JobSetup from './JobSetup';\r\nimport \"./styles/util.scss\";\r\nimport App from './App';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  NavLink\r\n} from \"react-router-dom\";\r\n/**\r\n * Main component that handles state of the solver, machines, jobs etc.\r\n */\r\n\r\nclass FactoryOptimizationApp extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // Hold all the state here.\r\n    this.state = {\r\n      machines: [],\r\n      categories: [],\r\n      jobs: [],\r\n      best_schedule: [],\r\n      makeSpan: 150\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const jobsStr = '[{\"id\":1,\"name\":\"Spring Water 16oz\",\"operations\":[{\"id\":1,\"operationName\":\"Bottle Expansion\",\"machineAndTimes\":[[1,\"10\"],[\"6\",\"20\"]]},{\"id\":2,\"operationName\":\"Water Purifying\",\"machineAndTimes\":[[\"2\",\"10\"]]},{\"id\":3,\"operationName\":\"Water Filling\",\"machineAndTimes\":[[\"3\",\"10\"]]},{\"id\":4,\"operationName\":\"Bottle Capping\",\"machineAndTimes\":[[\"4\",\"10\"]]},{\"id\":5,\"operationName\":\"Bottle Labeling\",\"machineAndTimes\":[[\"5\",\"8\"]]},{\"id\":6,\"operationName\":\"Bottle Labeling 2\",\"machineAndTimes\":[[\"5\",\"10\"]]},{\"id\":7,\"operationName\":\"Bottle Labeling 3\",\"machineAndTimes\":[[\"5\",\"10\"]]}]},{\"id\":2,\"name\":\"Distilled Water 16oz\",\"operations\":[{\"id\":1,\"operationName\":\"Bottle Expansion\",\"machineAndTimes\":[[1,\"50\"],[\"6\",\"30\"]]},{\"id\":2,\"operationName\":\"Water Purifying\",\"machineAndTimes\":[[\"2\",\"15\"]]},{\"id\":3,\"operationName\":\"Water Filling\",\"machineAndTimes\":[[\"3\",\"10\"]]},{\"id\":4,\"operationName\":\"Bottle Capping\",\"machineAndTimes\":[[\"4\",\"10\"]]}]},{\"id\":3,\"name\":\"Distilled Water 32oz\",\"operations\":[{\"id\":1,\"operationName\":\"Bottle Expansion \",\"machineAndTimes\":[[1,\"30\"],[\"6\",\"50\"]]},{\"id\":2,\"operationName\":\"Water Purifying\",\"machineAndTimes\":[[\"2\",\"12\"]]},{\"id\":3,\"operationName\":\"Water Filling\",\"machineAndTimes\":[[\"3\",\"20\"]]},{\"id\":4,\"operationName\":\"Bottle Capping\",\"machineAndTimes\":[[\"4\",\"10\"]]},{\"id\":5,\"operationName\":\"Bottle Labeling\",\"machineAndTimes\":[[\"5\",\"16\"]]}]},{\"id\":4,\"name\":\"Bottle Water 32oz\",\"operations\":[{\"id\":1,\"operationName\":\"Bottle Expansion \",\"machineAndTimes\":[[1,\"15\"],[\"6\",\"20\"]]},{\"id\":2,\"operationName\":\"Water Purifying\",\"machineAndTimes\":[[\"2\",\"30\"]]},{\"id\":3,\"operationName\":\"Water Filling\",\"machineAndTimes\":[[\"3\",\"20\"]]},{\"id\":4,\"operationName\":\"Bottle Capping\",\"machineAndTimes\":[[\"4\",\"10\"]]},{\"id\":5,\"operationName\":\"Bottle Labeling\",\"machineAndTimes\":[[\"5\",\"10\"]]}]}]'\r\n    const machinesStr = '[{\"name\":\"Bottle Expansion Mold Machine\",\"categories\":[],\"id\":1},{\"name\":\"Water Cleaning Machine\",\"categories\":[],\"id\":2},{\"name\":\"Water Filling Machine\",\"categories\":[],\"id\":3},{\"name\":\"Bottle Capping Machine\",\"categories\":[],\"id\":4},{\"name\":\"Bottle Labeling Machine\",\"categories\":[],\"id\":5},{\"name\":\"Bottle Expansion Mold Machine 2\",\"categories\":[],\"id\":6}]'\r\n    const machines = JSON.parse(localStorage.getItem(\"machines\") || machinesStr );\r\n    const categories = JSON.parse(localStorage.getItem(\"categories\") || \"[]\" );\r\n    const jobs = JSON.parse(localStorage.getItem(\"jobs\") || jobsStr);\r\n    this.setState({\r\n      machines,\r\n      categories,\r\n      jobs\r\n    })\r\n  }\r\n  componentDidUpdate(){\r\n    localStorage.setItem('machines', JSON.stringify(this.state.machines) )\r\n    localStorage.setItem('categories', JSON.stringify(this.state.categories) )\r\n    localStorage.setItem('jobs', JSON.stringify(this.state.jobs) )\r\n  }\r\n\r\n\r\n  handleNavBarClick = (choosenMenu) => {\r\n    this.setState({\r\n      activeMenu:choosenMenu\r\n    })\r\n    console.log(choosenMenu)\r\n  }\r\n\r\n  /**\r\n   * CRUD Operations for machines (minus read obvs)\r\n   * \r\n   */\r\n  createMachine = async (machine) => {\r\n    machine.id = this.state.machines.length + 1\r\n    this.setState({\r\n      machines: [...this.state.machines,machine]\r\n    })\r\n  }\r\n  updateMachine = (machine) => {\r\n    this.setState({\r\n      machines: this.state.machines.map(mac => mac.id === machine.id ? machine : mac)\r\n    })\r\n  }\r\n  deleteMachine = (machine) => {\r\n    this.setState({\r\n      machines: this.state.machines.filter(mac => mac.id !==  machine.id)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * CRUD Operations for Categories\r\n   */\r\n  createCategory = (category) => {\r\n    category.id = this.state.categories.reduce((prev,cur) => cur.id + 1, 1)\r\n    this.setState({\r\n      categories: [...this.state.categories, category]\r\n    })\r\n  }\r\n  updateCategory = (category) => {\r\n    this.setState({\r\n      categories: this.state.categories.map(cat => cat.id === category.id ? category : cat)\r\n    })\r\n  }\r\n  deleteCategory = (category) => {\r\n    console.log(\"deleting \", category)\r\n    this.setState({\r\n      categories: this.state.categories.filter(cat => cat.id !== category.id)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * CRUD Operations for Jobs\r\n   */\r\n  createJob = (job) => {\r\n    console.log(\"new job \", job)\r\n    job.id = this.state.jobs.reduce( (prev, curr) => curr.id >= prev ? curr.id+1 : prev, 1)\r\n    this.setState({\r\n      jobs: [...this.state.jobs, job]\r\n    })\r\n  }\r\n  updateJob = (job) => {\r\n    this.setState({\r\n      jobs: this.state.jobs.map(j => j.id === job.id ? job : j )\r\n    })\r\n  }\r\n  deleteJob = (job) => {\r\n    this.setState({\r\n      jobs: this.state.jobs.filter(j => j.id !== job.id)\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <nav className='factory-navbar d-flex justify-content-between'>          \r\n          <div className=\"ml-2 navbar-brand text-white\">Water Bottling Plant Makespan Optimization</div>\r\n          <ul className=\"d-flex mr-5\">\r\n            <NavLink to=\"machines\">\r\n              <li className='factory-navbar__menu-item'>Machines</li> \r\n            </NavLink>\r\n            <NavLink to=\"jobs\">\r\n              <li className='factory-navbar__menu-item'>Jobs</li> \r\n            </NavLink>\r\n            <NavLink to=\"/\" exact>\r\n              <li className='factory-navbar__menu-item'>Solve</li> \r\n            </NavLink>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"\">\r\n            <App\r\n              jobs={this.state.jobs}\r\n              machines={this.state.machines}\r\n            />\r\n          </Route>\r\n          <Route path=\"/machines\" exact={true}>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-8\">\r\n                  <Machines \r\n                    createMachine={this.createMachine} \r\n                    updateMachine={this.updateMachine} \r\n                    deleteMachine={this.deleteMachine}\r\n                    machines={this.state.machines}\r\n                    categories={this.state.categories}\r\n                    />\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                  <Categories\r\n                    categories={this.state.categories}\r\n                    machines={this.state.machines}\r\n                    createCategory={this.createCategory}\r\n                    updateCategory={this.updateCategory}\r\n                    deleteCategory={this.deleteCategory}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/jobs\"  exact={true}>\r\n            <JobEditor \r\n              createJob={this.createJob}\r\n              updateJob={this.updateJob}\r\n              deleteJob={this.deleteJob}\r\n              jobs={this.state.jobs}\r\n              machines={this.state.machines}\r\n            />\r\n          </Route>\r\n          <Route path=\"/parameters\"  exact={true}>\r\n            <Parameters  />\r\n          </Route>\r\n\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n};\r\n\r\nexport default FactoryOptimizationApp\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport FactoryOptimizationApp from './factoryOptimizationApp'; //Top level component that includes the optimizationWorkFlow\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<FactoryOptimizationApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}